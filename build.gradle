buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url 'http://central.maven.org/maven2/'
        }
    }
}

group 'name.troshin.anton.clematis'

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

idea {
    project {
        languageLevel = '1.8'
    }
}

allprojects {
    repositories {
        flatDir {
            dirs("${project.rootDir}/repository")
        }
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://maven.imagej.net/content/repositories/public/'
        }
    }
}

ext {
    logbackVersion = '1.1.11'
    log4jVersion = '1.2.16'
    slf4jVersion = '1.7.12'

    lombokVersion = '1.18.4'

    apacheCommonsVersion = '3.0.1'
    commonsLang3Version = '3.5'
    commonsIoVersion = '2.6'
    commonsLoggingVersion = '1.1.1'

    bshVersion = '2.0b6'

    checkstyleVersion = '7.6'
    findbugsVersion = '3.0.1'

    junitVersion = '4.12'
    junitParamsVersion = '1.0.4'
    assertjCoreVersion = '3.6.1'
    mustacheJavaVersion = '0.9.4'
    mockitoVersion = '1.6.4'
    mockitoJunit4Version = '1.6.6'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
//    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    compileJava {
       // options.compilerArgs << '-Xlint:unchecked' << "-Xlint:deprecation"
        options.compilerArgs << '-Xlint:sunapi' << '-XDenableSunApiLintControl'
    }

    dependencies {

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "log4j:log4j:$log4jVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"

        compile "org.apache.commons:commons-lang3:$commonsLang3Version"
        compile "commons-io:commons-io:$commonsIoVersion"
        compile "commons-logging:commons-logging:$commonsLoggingVersion"

        compile "org.apache-extras.beanshell:bsh:$bshVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        compileOnly "com.google.code.findbugs:findbugs-annotations:$findbugsVersion"

        testCompile "org.projectlombok:lombok:$lombokVersion"
        testCompile "org.assertj:assertj-core:$assertjCoreVersion"
        testCompile "com.github.spullara.mustache.java:mustache.java:$mustacheJavaVersion"
        testCompile "org.powermock:powermock-mockito-release-full:$mockitoVersion"
        testCompile "org.powermock:powermock-module-junit4-rule-agent:$mockitoJunit4Version"

        checkstyle "com.puppycrawl.tools:checkstyle:$checkstyleVersion"
    }

    jar {
        archiveName = "${baseName}.${extension}"

        manifest {
            attributes(
                    "Implementation-Title": project.name,
                    "Implementation-Version": version
            )
        }
    }
//
//    findbugs {
//        toolVersion = findbugsVersion
//        sourceSets = [sourceSets.main]
//    }
//
//    findbugsMain {
//        reports {
//            html {
//                enabled = true
//            }
//            xml {
//                enabled = false
//            }
//        }
//    }

    checkstyle {
        ignoreFailures = true
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
    }
    

    task checkstyleReport {
        doLast {
            if (file("${buildDir}/reports/checkstyle/${checkType}.xml").exists()) {
                ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                        style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                        out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
            }
        }
    }

//    gradle.taskGraph.afterTask {task, state ->
//        if (state.failure) {
//            if (task.name in ['checkstyleMain', 'checkstyleTest']) {
//                checkstyleReport {
//                    def matcher = task.name =~ /^checkstyle(.*)$/
//                    if (matcher.matches()) {
//                        project.ext.checkType = matcher.group(1).toLowerCase()
//                    }
//                }
//                checkstyleReport.execute()
//            }
//        }
//    }

    tasks.withType(FindBugs) {
        exclude '**/*Test*'
    }

    tasks.withType(Checkstyle) {
        exclude '**/*Test*'
    }

}
