buildscript {
    repositories {
        maven {
            url 'http://central.maven.org/maven2/'
        }
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
    }
}

plugins {
    id "org.flywaydb.flyway" version "3.2.1"
    id "com.palantir.docker" version "0.13.0"
}

group 'name.troshin.anton.clematis'

allprojects {
    repositories {
        flatDir {
            dirs("${project.rootDir}/repository")
        }
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://maven.imagej.net/content/repositories/public/'
        }
    }
}


apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'org.sonarqube'

ext {

    junitVersion = '4.12'
    junitParamsVersion = '1.0.4'
    findbugsVersion = '3.0.1'
    logbackVersion = '1.1.11'
    lombokVersion = '1.16.16'
    slf4jVersion = '1.7.12'
}

dependencies {

    compile(
        'commons-logging:commons-logging:1.1.1'
    )
}

idea {
    project {
        languageLevel = '1.8'
    }
}

subprojects {
    
    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    compileJava {
        options.compilerArgs << '-Xlint:unchecked' << "-Xlint:deprecation"
    }

    repositories {
        jcenter()
    }

    dependencies {

        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "ch.qos.logback:logback-classic:$logbackVersion"

        compile "commons-io:commons-io:2.5"
        compile "org.apache.commons:commons-imaging:1.0"

        checkstyle "com.puppycrawl.tools:checkstyle:7.6"
    }

    jar {
        archiveName = "${baseName}.${extension}"

        manifest {
            attributes(
                    "Implementation-Title": project.name,
                    "Implementation-Version": version
            )
        }
    }

    findbugs {
        toolVersion = findbugsVersion
        sourceSets = [sourceSets.main]
    }

    findbugsMain {
        reports {
            html {
                enabled = true
            }
            xml {
                enabled = false
            }
        }
    }

    checkstyle {
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
    }

    task checkstyleReport {
        doLast {
            if (file("${buildDir}/reports/checkstyle/${checkType}.xml").exists()) {
                ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                        style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                        out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
            }
        }
    }

    gradle.taskGraph.afterTask {Task task, TaskState state ->
        if (state.failure) {
            if (task.name in ['checkstyleMain', 'checkstyleTest']) {
                checkstyleReport {
                    def matcher = task.name =~ /^checkstyle(.*)$/
                    if (matcher.matches()) {
                        project.ext.checkType = matcher.group(1).toLowerCase()
                    }
                }
                checkstyleReport.execute()
            }
        }
    }

    tasks.withType(FindBugs) {
        exclude '**/*Test*'
    }

    tasks.withType(Checkstyle) {
        exclude '**/*Test*'
    }

}

flyway {
    locations = ["filesystem:${file('etc/db/migration')}"]
}

sonarqube {
    properties {
        property "sonar.projectKey", "org.clematis:jworkspace"
        property "sonar.projectName", "Clematis Desktop"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

group 'org.clematis'

docker {
    name 'jworkspace'
    if (project.hasProperty('imageTag')) {
        tags imageTag
    }
    copySpec.from('.').include('etc/**','**/jworkspace.jar').into('/')
}
