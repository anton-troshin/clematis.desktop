buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
	    maven {
            url 'http://central.maven.org/maven2/'
        }
    }
}

plugins {
    id 'jacoco'
}

group 'name.troshin.anton.clematis'
version '2.0.0 - DEV'


subprojects {

    apply plugin: 'java'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    apply from: file("${project.rootDir}/dependencies.gradle")
    apply from: file("${project.rootDir}/libraries.gradle")

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    compileJava {
       // options.compilerArgs << '-Xlint:unchecked' << "-Xlint:deprecation"
        options.compilerArgs << '-Xlint:sunapi' << '-XDenableSunApiLintControl'
    }

    repositories {
        jcenter()
    }

    jar {
        archiveName = "${baseName}.${extension}"

        manifest {
            attributes(
                    "Implementation-Title": project.name,
                    "Implementation-Version": version
            )
        }
    }

    findbugs {
        toolVersion = findbugsVersion
        sourceSets = [sourceSets.main]
    }

    findbugsMain {
        reports {
            html {
                enabled = true
            }
            xml {
                enabled = false
            }
        }
    }

    checkstyle {
        configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
    }

    task checkstyleReport {
        doLast {
            if (file("${buildDir}/reports/checkstyle/${checkType}.xml").exists()) {
                ant.xslt(in: "${buildDir}/reports/checkstyle/${project.ext.checkType}.xml",
                        style: "${project.rootDir}/config/checkstyle/checkstyle.xsl",
                        out: "${buildDir}/reports/checkstyle/checkstyle_${project.ext.checkType}.html")
            }
        }
    }

    tasks.withType(FindBugs) {
        exclude '**/*Test*'
    }

    tasks.withType(Checkstyle) {
        exclude '**/*Test*'
    }

    test.useTestNG()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
