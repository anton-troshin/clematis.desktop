/* ----------------------------------------------------------------------------
   The Kiwi Toolkit - A Java Class Library
   Copyright (C) 1998-2008 Mark A. Lindner

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this library; if not, see <http://www.gnu.org/licenses/>.
   ----------------------------------------------------------------------------
*/

package com.hyperrealm.kiwi.event;

import java.awt.event.*;
import javax.swing.event.*;

/** A support object for generating <code>NotificationEvent</code>s.
 *
 * @see com.hyperrealm.kiwi.event.NotificationEvent
 * @see com.hyperrealm.kiwi.event.NotificationListener
 *
 * @author Mark Lindner
 */

public class NotificationSupport
{
  private EventListenerList listeners;
  private Object source;

  /** Construct a new <code>NotificationSupport</code> object.
   *
   * @param source The owner of this object (and the source of the events that
   * will be generated by it).
   */  
  
  public NotificationSupport(Object source)
  {
    this.source = source;
    listeners = new EventListenerList();
  }

  /** Add a <code>NotificationListener</code> to this object's list of
   * listeners.
   *
   * @param listener The listener to add.
   */  
  
  public void addNotificationListener(NotificationListener listener)
  {
    listeners.add(NotificationListener.class, listener);
  }

  /** Remove a <code>NotificationListener</code> from this object's list of
   * listeners.
   *
   * @param listener The listener to remove.
   */

  public void removeNotificationListener(NotificationListener listener)
  {
    listeners.remove(NotificationListener.class, listener);
  }

  /** Fire a <code>NotificationEvent</code> with the specified ID.
   */
  
  public void fireNotificationEvent(int id)
  {
    NotificationEvent evt = null;
    
    Object[] list = listeners.getListenerList();

    for(int i = list.length - 2; i >= 0; i -= 2)
    {
      if(list[i] == NotificationListener.class)
      {
        // Lazily create the event:
        if(evt == null)
          evt = new NotificationEvent(source, id);
        ((NotificationListener)list[i + 1]).notificationPerformed(evt);
      }
    }
  }
  
}

/* end of source file */
